(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'usbid_usuario'"
p3
sS'layer'
p4
S'/home/leotms/Desktop/Sistemas/applications/SPE/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nfrom usbutils import get_ldap_data, random_key\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("\xc2\xa1Bienvenido!")\n    return dict(message=T(\'Sistema de Pasant\xc3\xadas Empresariales\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef login_cas():\n    if not request.vars.getfirst(\'ticket\'):\n        #redirect(URL(\'error\'))\n        pass\n    try:\n        import urllib2\n        #ssl._create_default_https_context = ssl._create_unverified_context\n        url = "https://secure.dst.usb.ve/validate?ticket="+\\\n              request.vars.getfirst(\'ticket\') +\\\n              "&service=http%3A%2F%2F127.0.0.1%3A8000%2FSPE%2Fdefault%2Flogin_cas"\n\n        req = urllib2.Request(url)\n        response = urllib2.urlopen(req)\n        the_page = response.read()\n\n    except Exception, e:\n        print e\n        redirect(URL(\'error\'))\n\n    if the_page[0:2] == "no":\n        redirect(URL(\'index\'))\n    else:\n        # session.casticket = request.vars.getfirst(\'ticket\')\n        data  = the_page.split()\n        usbid = data[1]\n        print usbid\n        tablaUsuarios  = dbSPE.usuario\n        consulta = db(tablaUsuarios.usbid_usuario==usbid)\n\n        if consulta.isempty():\n            print "Empty"\n        else:\n            print "hay algo aqui"\n        # if consulta.isempty():\n        #     clave   = random_key()\n        #     us      = get_ldap_data(usbid)\n        #     print "================== Begin"\n        #     print "type      " + str(type(us))\n        #     print "user_data " + str(us)\n        #\n        #     # print "insertando"\n        #     a = db.auth_user.insert(\n        #         first_name = us.get(\'first_name\'),\n        #         last_name  = us.get(\'last_name\'),\n        #         username   = usbid,\n        #         password   = db.auth_user.password.validate(clave)[0],\n        #         email      = us.get(\'email\'),\n        #         f_cedula     = us[\'cedula\'],\n        #         f_telefono   = us[\'phone\'],\n        #         f_tipo       = us[\'tipo\'],\n        #     )\n        #\n        #     user = db(db.auth_user.username==usbid).select()[0]\n        #     print us\n        #     db.t_universitario.insert(\n        #         f_usbid   = usbid,\n        #         f_key     = clave,\n        #         f_usuario = user.id\n        #     )\n        #\n        #     userUniv = db(db.t_universitario.f_usbid==usbid).select()[0]\n        #\n        #     if (us[\'tipo\'] == "Pregrado") or (us[\'tipo\'] == "Postgrado"):\n        #        # Si es estudiante insertar en su tabla\n        #         db.t_estudiante.insert(\n        #             f_universitario = userUniv.id,\n        #             f_carrera       = us[\'carrera\'],\n        #             f_sede          = "Sartenejas"\n        #         )\n        #     elif us[\'tipo\'] == "Docente":\n        #         # En caso de ser docente, agregar dpto.\n        #         db.t_tutor_academico.insert(\n        #             f_universitario = userUniv.id,\n        #             f_departamento  = us[\'dpto\'],\n        #             f_sede          = "Sartenejas"\n        #         )\n        #\n        # else:\n        #     userUniv = db(db.t_universitario.f_usbid==usbid).select()[0]\n        #     clave    = userUniv.f_key\n        #\n        #\n        # # Al finalizar login o registro, redireccionamos a home\n        # auth.login_bare(usbid,clave)\n        # redirect(\'home\')\n\n    return None\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef retirar_pasantia():\n    return response.render(\'default/retirar_pasantia.html\')\n\ndef registrar_profesor():\n    return response.render(\'default/registrar_profesor.html\')\n\nresponse._vars=response._caller(login_cas)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leotms/Desktop/Sistemas/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/leotms/Desktop/Sistemas/applications/SPE/controllers/default.py", line 155, in <module>\n  File "/home/leotms/Desktop/Sistemas/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leotms/Desktop/Sistemas/applications/SPE/controllers/default.py", line 70, in login_cas\n    consulta = db(tablaUsuarios.usbid_usuario==usbid)\nAttributeError: \'Table\' object has no attribute \'usbid_usuario\'\n'
p11
s.