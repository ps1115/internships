(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'forms' is not defined"
p3
sS'layer'
p4
S'/home/leotms/Desktop/Sistemas/applications/Empresas/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n\ndef index():\n\n    response.flash = "Bienvenida Empresa"\n    # return dict(message=\'\xc3\x81rea de Empresas\')\n    return dict(form=login())\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef login():\n\n    formulario_login = SQLFORM.factory(\n                            Field(\'login\', label=T(\'Usuario o Correo Electronico\'), required=True,\n                                    requires=[IS_MATCH(\'^[a-zA-Z0-9.@_\\\\-]\',error_message=T(\'Usuario o correo invalido.\'))]),\n                            Field(\'password\', \'password\',required=True,label=T(\'Contrase\xc3\xb1a\')),\n                           captcha_field(),\n                           formstyle=\'bootstrap3_stacked\'\n                           )\n\n\n    if formulario_login.process(onvalidation=validar_credenciales).accepted:\n        auth.login_bare(request.vars.login,request.vars.password)\n        redirect(URL(c=\'default\',f=\'home\'))\n    else:\n        pass\n    return formulario_login\n\ndef validar_credenciales(form):\n    #Si es empresa, busco en la tabla por login\n    login_empresa1  = dbSPE(dbSPE.empresa.log  == form.vars.login)\n    #Si es tutor industrial, busco en la tabla por email\n    login_tutor_ind = dbSPE(dbSPE.tutor_industrial.email  ==form.vars.login)\n\n    #Solo puedo encontrar alguno de los dos, verifico el password\n    if not login_empresa1.isempty():\n        datosUsuario = login_empresa1.select()[0]\n        if datosUsuario.password != form.vars.password:\n            forms.errors = "Usuario o contrase\xc3\xb1a invalida"\n    elif not login_tutor_ind.isempty():\n        datosUsuario = login_tutor_ind.select()[0]\n        if datosUsuario.password != form.vars.password:\n            forms.errors = "Usuario o contrase\xc3\xb1a invalida"\n\ndef logout():\n    url = (URL(c=\'default\',f=\'index\'))\n    auth.logout(next=url)\n\ndef home():\n    response.flash = T("Inicio Exitoso")\n    return response.render(\'default/home.html\')\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leotms/Desktop/Sistemas/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/leotms/Desktop/Sistemas/applications/Empresas/controllers/default.py", line 96, in <module>\n  File "/home/leotms/Desktop/Sistemas/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leotms/Desktop/Sistemas/applications/Empresas/controllers/default.py", line 16, in index\n    return dict(form=login())\n  File "/home/leotms/Desktop/Sistemas/applications/Empresas/controllers/default.py", line 47, in login\n    if formulario_login.process(onvalidation=validar_credenciales).accepted:\n  File "/home/leotms/Desktop/Sistemas/gluon/html.py", line 2304, in process\n    self.validate(**kwargs)\n  File "/home/leotms/Desktop/Sistemas/gluon/html.py", line 2241, in validate\n    if self.accepts(**kwargs):\n  File "/home/leotms/Desktop/Sistemas/gluon/sqlhtml.py", line 1505, in accepts\n    **kwargs\n  File "/home/leotms/Desktop/Sistemas/gluon/html.py", line 2142, in accepts\n    call_as_list(onvalidation, self)\n  File "/home/leotms/Desktop/Sistemas/gluon/html.py", line 146, in call_as_list\n    item(*a, **b)\n  File "/home/leotms/Desktop/Sistemas/applications/Empresas/controllers/default.py", line 64, in validar_credenciales\n    forms.errors = "Usuario o contrase\xc3\xb1a invalida"\nNameError: global name \'forms\' is not defined\n'
p11
s.